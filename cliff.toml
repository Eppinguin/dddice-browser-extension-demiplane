# configuration file for git-cliff (0.7.0)

[changelog]
# changelog header
header = """
# Changelog
Features, fixes, and enhancements for dddice.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
## {{ version }}
_Released {{ timestamp | date(format="%Y-%m-%d") }}_
{% else %}\
## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
#### {{ group | upper_first }}
{% for scope, commits in commits | group_by(attribute="scope") %}{% if scope != "other" %}\n- {{scope | upper_first}} {% endif %}
{%- for commit in commits %}
{% if scope != "other" %}    {% endif %}- {{ commit.message | upper_first }}\
{% endfor %}{% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespaces from the template
trim = false
# changelog footer
footer = """
Install the browser extension from:

* Chrome Web Store 👉 https://chrome.google.com/webstore/detail/dddice/npmficphbhbhebhjfekjopgkpojjcfem
* Edge Add-ins Store 👉 https://microsoftedge.microsoft.com/addons/detail/dddice/lphfbgpflpoenhfbffkmpjpepmcpcnnj

Opera and Brave users can install the extension from the Chrome Web Store
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# preprosser
commit_preprocessors = [
    { pattern = "\\(roll20\\)", replace = "(Roll20)"},
    { pattern = "\\(d&db\\)", replace = "(D&D Beyond)"},
    { pattern = "\\(dmv\\)", replace = "(Dungeon Master's Vault)"},
    { pattern = "\\(pb2e\\)", replace = "(Pathbuilder 2e)"},
    { pattern = "\\((.*(roll20|d&db).*)+\\):", replace = "(D&D Beyond & Roll20):"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "(infrastructure)", skip = true },
    { message = "(internal)", skip = true },
    { message = "(handbook)", skip = true },
    { message = "(deps)", skip = true },
    { message = "^feat", group = "<!-- 0 -->🎉 New Features", default_scope="other"},
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes", default_scope="other"},
    { message = "^perf", group = "<!-- 2 -->🚀 Performance", default_scope="other"},
    { message = "^doc", group = "<!-- 3 -->📝 Documentation", default_scope="other"},
    { message = "^style", group = "<!-- 4 -->🎨 Styling", default_scope="other"},
    # { message = "^refactor", group = "<!-- 5 -->⚠️ Refactor", default_scope="other"},
    { message = "^chore\\(release\\): prepare for", skip = true},
    { body = ".*security", group = "<!-- 6 -->🔐 Security", default_scope="other"},
    { message = "^chore", group = "<!-- 7 -->⚙️ Miscellaneous", default_scope="other"},
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# skip tags with -rc.# in them
skip_tags = "-rc.[0-9]*"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = true
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
